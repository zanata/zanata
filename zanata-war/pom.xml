<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
	<modelVersion>4.0.0</modelVersion>
	<parent>
		<groupId>org.zanata</groupId>
		<artifactId>server</artifactId>
		<version>3.0.0-alpha-2-SNAPSHOT</version>
	</parent>
	<artifactId>zanata-war</artifactId>
	<packaging>war</packaging>
	<name>Zanata web application</name>

	<!-- Should be the same as zanata-server/pom.xml -->
	<scm>
		<connection>scm:git:git://github.com/zanata/zanata.git</connection>
		<developerConnection>scm:git:git@github.com:zanata/zanata.git</developerConnection>
		<url>https://github.com/zanata/zanata</url>
	</scm>

	<properties>
		<jboss.embedded.version>beta3.SP12</jboss.embedded.version>
		<war.config.dir>${basedir}/src/etc</war.config.dir>
		<containerId>jboss5x</containerId>
        <allow.deploy.skip>true</allow.deploy.skip>
		
		<!-- application properties -->
		<env.debug>false</env.debug>
		<war.name>zanata</war.name>
		<zanata.gwt.module>org.zanata.webtrans.Application</zanata.gwt.module>
		<extra.servlets />

		<!-- Default MySql login -->
		<mysql.user>root</mysql.user>
		<mysql.password />

        <!--this will get set by maven dependency:properties goal and be used in gwt-maven-plugin-->
        <lombok.lib>${org.projectlombok:lombok:jar}</lombok.lib>

        <!-- Groovy and Gmaven properties -->
        <gmavenProviderSelection>2.0</gmavenProviderSelection>
        <groovyVersion>2.0.7</groovyVersion>
    </properties>

	<build>
		<finalName>zanata</finalName>
		
		<resources>
			<resource>
				<directory>src/main/resources</directory>
				<filtering>true</filtering>
			</resource>
		</resources>

		<plugins>
            <plugin>
                <artifactId>maven-dependency-plugin</artifactId>
                <executions>
                    <execution>
                        <phase>initialize</phase>
                        <goals>
                            <goal>properties</goal>
                        </goals>
                    </execution>
                </executions>
            </plugin>
         <plugin>
            <groupId>org.apache.maven.plugins</groupId>
            <artifactId>maven-enforcer-plugin</artifactId>
            <executions>
              <execution>
                <id>enforce-ban-duplicate-classes</id>
                <goals>
                  <goal>enforce</goal>
                </goals>
                <configuration>
                  <!-- TODO enforce this once we've cleaned up
                  the remaining duplicates which are caused by
                  multiple jars for openid4java, drools, gwt
                  and lucene-analyzers -->
                  <fail>false</fail>
                  <rules>
                    <banDuplicateClasses>
                       <ignoreClasses combine.children="append">
                          <!-- caused by beanutils and jboss-embedded-thirdparty-all -->
                          <ignoreClass>org.apache.commons.collections.*</ignoreClass>

                          <!-- caused by jboss-embedded-thirdparty-all -->
                          <ignoreClass>antlr.*</ignoreClass>
                          <ignoreClass>com.sun.activation.*</ignoreClass>
                          <ignoreClass>com.sun.xml.*</ignoreClass>
                          <ignoreClass>com.sun.istack.*</ignoreClass>
                          <ignoreClass>hsqlServlet</ignoreClass>
                          <ignoreClass>javassist.*</ignoreClass>
                          <ignoreClass>javax.activation.*</ignoreClass>
                          <ignoreClass>javax.annotation.*</ignoreClass>
                          <ignoreClass>javax.ejb.*</ignoreClass>
                          <ignoreClass>javax.interceptor.*</ignoreClass>
                          <ignoreClass>javax.persistence.*</ignoreClass>
                          <ignoreClass>javax.transaction.*</ignoreClass>
                          <ignoreClass>javax.xml.XMLConstants</ignoreClass>
                          <ignoreClass>javax.xml.bind.*</ignoreClass>
                          <ignoreClass>javax.xml.namespace.*</ignoreClass>
                          <ignoreClass>javax.xml.stream.*</ignoreClass>
                          <ignoreClass>org.apache.commons.logging.*</ignoreClass>
                          <ignoreClass>org.apache.log4j.*</ignoreClass>
                          <ignoreClass>org.dom4j.*</ignoreClass>
                          <ignoreClass>org.hsqldb.*</ignoreClass>
                          <ignoreClass>org.jboss.crypto.*</ignoreClass>
                          <ignoreClass>org.jboss.deployment.*</ignoreClass>
                          <ignoreClass>org.jboss.logging.Logger</ignoreClass>
                          <ignoreClass>org.jboss.Main*</ignoreClass>
                          <ignoreClass>org.jboss.mx.*</ignoreClass>
                          <ignoreClass>org.jboss.security.*</ignoreClass>
                          <ignoreClass>org.jboss.system.*</ignoreClass>
                          <ignoreClass>org.jboss.Version</ignoreClass>
                          <ignoreClass>org.quartz.*</ignoreClass>

                          <!--  caused by gwt jars -->
                          <ignoreClass>com.google.common.*</ignoreClass>
                          <ignoreClass>com.google.gwt.*</ignoreClass>
                          <ignoreClass>com.google.web.bindery.*</ignoreClass>
                          <ignoreClass>com.ibm.icu.*</ignoreClass>
                          <ignoreClass>com.steadystate.css.*</ignoreClass>
                          <ignoreClass>javax.servlet.jsp.*</ignoreClass>
                          <ignoreClass>javax.validation.ConstraintViolationException_CustomFieldSerializer</ignoreClass>
                          <ignoreClass>org.apache.commons.beanutils.*</ignoreClass>
                          <ignoreClass>org.apache.commons.codec.*</ignoreClass>
                          <ignoreClass>org.apache.commons.io.*</ignoreClass>
                          <ignoreClass>org.apache.commons.lang.*</ignoreClass>
                          <ignoreClass>org.apache.http.*</ignoreClass>
                          <ignoreClass>org.apache.james.mime4j.*</ignoreClass>
                          <ignoreClass>org.apache.regexp.*</ignoreClass>
                          <ignoreClass>org.cyberneko.html.*</ignoreClass>
                          <ignoreClass>org.hibernate.validator.*</ignoreClass>
                          <ignoreClass>org.w3c.css.sac.*</ignoreClass>

                          <!-- caused by gwt jars and jboss-embedded-thirdparty-all -->
                          <ignoreClass>javax.servlet.*</ignoreClass>
                          <ignoreClass>javax.xml.*</ignoreClass>
                          <ignoreClass>org.apache.html.*</ignoreClass>
                          <ignoreClass>org.apache.wml.*</ignoreClass>
                          <ignoreClass>org.apache.xerces.*</ignoreClass>
                          <ignoreClass>org.apache.xmlcommons.Version</ignoreClass>
                          <ignoreClass>org.apache.xml.serialize.*</ignoreClass>
                          <ignoreClass>org.w3c.dom.*</ignoreClass>
                          <ignoreClass>org.xml.sax.*</ignoreClass>
                       </ignoreClasses>
                    </banDuplicateClasses>
                  </rules>
                </configuration>
              </execution>
              <execution>
                  <id>enforce-arquillian-jboss-location-present</id>
                  <goals>
                      <goal>enforce</goal>
                  </goals>
                  <configuration>
                      <rules>
                          <requireProperty>
                              <property>arquillian.jboss.home</property>
                              <message>You will need to set the arquillian.jboss.home property to run integration tests</message>
                          </requireProperty>
                      </rules>
                      <fail>false</fail>
                  </configuration>
              </execution>
            </executions>
         </plugin>

            <plugin>
                <artifactId>maven-antrun-plugin</artifactId>
                <executions>
                    <execution>
                        <phase>prepare-package</phase>
                        <configuration>
                            <tasks>
                                <mkdir dir="${project.build.directory}/zanata" />
                            </tasks>
                        </configuration>
                        <goals>
                            <goal>run</goal>
                        </goals>
                    </execution>
                    <execution>
                        <id>print lombok location</id>
                        <phase>process-resources</phase>
                        <configuration>
                            <target>
                                <echo>lombok VM arguments for GWT compilation:</echo>
                                <echo>-javaagent:${lombok.lib}=ECJ</echo>
                            </target>
                        </configuration>
                        <goals>
                            <goal>run</goal>
                        </goals>
                    </execution>
                    <execution>
                        <id>prepare-arquillian-container</id>
                        <phase>pre-integration-test</phase>
                        <goals>
                            <goal>run</goal>
                        </goals>
                        <configuration>
                            <target>
                                <copy file="${project.basedir}/src/test/resources/arquillian/standalone.xml" tofile="${arquillian.jboss.home}/standalone/configuration/zanata-standalone.xml" />
                            </target>
                        </configuration>
                    </execution>
                </executions>
            </plugin>
			<plugin>
			    <artifactId>maven-clean-plugin</artifactId>
			    <configuration>
			      <!-- Remove extra directories created by GWT DevMode -->
			      <filesets>
                    <fileset>
			          <directory>src/main/webapp/WEB-INF/deploy</directory>
			        </fileset>
                    <fileset>
                      <directory>src/main/webapp/webtrans</directory>
                    </fileset>
                  </filesets>
		          <followSymLinks>false</followSymLinks>
			    </configuration>
			</plugin>
			<plugin>
				<artifactId>maven-war-plugin</artifactId>
				<configuration>
					<warName>${war.name}-${project.version}</warName>
					<webResources>
						<resource>
							<directory>src/main/webapp-jboss</directory>
							<filtering>true</filtering>

						</resource>
						<resource>
                            <directory>src/main/resources</directory>
                            <includes>
                                <include>images/**</include>
                            </includes>
                        </resource>
                        <!-- Include the GWT generated resources -->
                        <resource>
                        	<directory>${project.build.directory}/zanata</directory>
                        </resource>
					</webResources>
					<archive>
						<manifest>
							<addClasspath>false</addClasspath>
							<addDefaultImplementationEntries>true</addDefaultImplementationEntries>
							<addDefaultSpecificationEntries>true</addDefaultSpecificationEntries>
						</manifest>
						<manifestEntries>
							<Implementation-Build>${maven.build.timestamp}</Implementation-Build>
							<SCM-Changeset>${changeSet}</SCM-Changeset>
						</manifestEntries>
					</archive>
				</configuration>
				<executions>
					<!-- Internal auth war -->
					<execution>
						<id>default-war</id>
						<configuration>
							<webappDirectory>${project.build.directory}/${project.build.finalName}</webappDirectory>
							<filters>
								<filter>${war.config.dir}/mysql.properties</filter>
							</filters>
						</configuration>
					</execution>
					<!-- Default Seam tests exploded war -->
					<execution>
						<id>generate-seamtests-war</id>
						<goals>
							<goal>exploded</goal>
						</goals>
						<phase>pre-integration-test</phase>
						<configuration>
							<webappDirectory>${project.build.directory}/${project.build.finalName}-seamtests</webappDirectory>
							<filters>
								<filter>${war.config.dir}/h2.properties</filter>
							</filters>
						</configuration>
					</execution>
				</executions>
			</plugin>

			<plugin>
				<groupId>org.codehaus.mojo</groupId>
				<artifactId>gwt-maven-plugin</artifactId>
                <dependencies>
                    <dependency>
                        <groupId>com.google.gwt</groupId>
                        <artifactId>gwt-user</artifactId>
                        <version>${gwt.version}</version>
                    </dependency>
                    <dependency>
                        <groupId>com.google.gwt</groupId>
                        <artifactId>gwt-dev</artifactId>
                        <version>${gwt.version}</version>
                    </dependency>
                    <dependency>
                        <groupId>com.google.gwt</groupId>
                        <artifactId>gwt-codeserver</artifactId>
                        <version>${gwt.version}</version>
                    </dependency>
                </dependencies>
				<executions>
					<execution>
						<id>compile</id>
						<goals>
							<goal>compile</goal>
							<!-- compile, generateAsync, test -->
						</goals>
						<configuration>
							<module>${zanata.gwt.module}</module>
						</configuration>
					</execution>
					<execution>
						<id>clean</id>
						<phase>clean</phase>
						<goals>
							<goal>clean</goal>
						</goals>
					</execution>
                    <execution>
                        <id>debug</id>
                        <goals>
                            <goal>debug</goal>
                        </goals>
                        <configuration>
                            <module>${zanata.gwt.module}</module>
                            <gen>${project.build.directory}/gwt-gen</gen>
                            <webappDirectory>
                                ${as.deploy}/zanata.war
                            </webappDirectory>
                            <hostedWebapp>
                                ${as.deploy}/zanata.war
                            </hostedWebapp>
                            <buildOutputDirectory>${project.build.directory}/gwt-gen</buildOutputDirectory>
                            <port>8080</port>
                        </configuration>
                    </execution>
                    <execution>
                        <id>run-codeserver</id>
                        <goals>
                            <goal>run-codeserver</goal>
                        </goals>
                        <configuration>
                            <module>${zanata.gwt.module}</module>
                        </configuration>
                    </execution>
                </executions>
                <configuration>
                    <runTarget>zanata/webtrans/Application.html</runTarget>
                    <noServer>true</noServer>
                    <!--below is needed if you want to use lombok on gwt code-->
                    <!--<extraJvmArgs>-javaagent:${lombok.lib}=ECJ</extraJvmArgs>-->
                </configuration>
			</plugin>

			<plugin>
				<artifactId>maven-surefire-plugin</artifactId>
				<configuration>
                    <argLine>-Dconcordion.output.dir=${concordion.output.dir}</argLine>
                    <junitArtifactName>none:none</junitArtifactName>
                    <testNGArtifactName>org.testng:testng</testNGArtifactName>
                    <forkMode>once</forkMode>
                    <argLine xml:space="preserve">-Xmx1024m -XX:MaxPermSize=512m -XX:+UseConcMarkSweepGC
						-XX:+CMSClassUnloadingEnabled -XX:+HeapDumpOnOutOfMemoryError
						-XX:HeapDumpPath=${project.build.directory} -Dsun.lang.ClassLoader.allowArraySyntax=true</argLine>
                    <suiteXmlFiles>
                        <suiteXmlFile>src/test/resources/AllNonContainerTests.tng.xml</suiteXmlFile>
                    </suiteXmlFiles>
                    <runOrder>alphabetical</runOrder>
<!-- TODO try parallel execution
               <parallel>methods</parallel>
               <threadCount>4</threadCount>
 -->
				</configuration>
                <!-- below trick is to let surefire run both junit and testng.
                see http://stackoverflow.com/questions/1232853/how-to-execute-junit-and-testng-tests-in-same-project-using-maven-surefire-plugi-->
			</plugin>
            <plugin>
                <groupId>org.codehaus.mojo</groupId>
                <artifactId>cobertura-maven-plugin</artifactId>
                <configuration>
                    <instrumentation>
                        <excludes>
                            <!--WebTran exclusion-->
                            <!--TODO move all gwt wrapper class under specific package. i.e boundary-->
                            <!--<exclude>**/boundary/**/*</exclude>-->
                            <exclude>**/test/**/*</exclude>
                            <!--<exclude>**/supersource/**/*</exclude>-->
                            <exclude>**/client/**/*View</exclude>
                            <exclude>**/client/Application*</exclude>
                            <exclude>**/client/auth/**</exclude>
                            <exclude>**/client/events/**</exclude>
                            <exclude>**/client/gin/**</exclude>
                            <exclude>**/client/rpc/**</exclude>
                            <exclude>**/client/ui/**</exclude>
                            <exclude>**/client/view/**</exclude>
                            <exclude>**/EventWrapperImpl*</exclude>
                            <exclude>**/*DataProvider*</exclude>
                            <exclude>**/*SelectionModel*</exclude>
                            <!--below are some trivial classes(java bean) at the moment-->
                            <exclude>**/shared/auth/**</exclude>
                            <exclude>**/shared/model/**</exclude>
                            <exclude>**/shared/rpc/**</exclude>

                            <!--Server exclusion-->
                            <exclude>**/job/**</exclude>
                            <exclude>**/liquibase/**</exclude>
                            <exclude>**/log4j/**</exclude>
                            <exclude>**/seam/**</exclude>
                            <exclude>**/rest/files/*</exclude>
                            <exclude>**/rest/*Mapper</exclude>
                            <exclude>**/openid/*</exclude>
                            <exclude>**/servlet/*</exclude>

                            <!--General exclusion-->
                            <exclude>**/*Exception*</exclude>
                        </excludes>
                    </instrumentation>
                    <check>
                        <totalBranchRate>${cobertura.total-branch-rate}</totalBranchRate>
                        <totalLineRate>${cobertura.total-line-rate}</totalLineRate>
                        <haltOnFailure>${cobertura.halt.failure}</haltOnFailure>
                    </check>
				</configuration>
			</plugin>

			<!-- Configure Failsafe to run in integration-test/verify phase -->
			<plugin>
				<artifactId>maven-failsafe-plugin</artifactId>
				<executions>
                    <!-- Container (Arquillian tests) -->
					<execution>
						<id>container-tests</id>
						<goals>
							<goal>integration-test</goal>
                            <goal>verify</goal>
						</goals>
                        <configuration>
                            <includes>
                                <include>**/*ITCase.java</include>
                            </includes>
                            <testNGArtifactName>none:none</testNGArtifactName>
                            <runOrder>alphabetical</runOrder>
                        </configuration>
					</execution>
				</executions>
			</plugin>

			<plugin>
				<groupId>org.codehaus.mojo</groupId>
				<artifactId>l10n-maven-plugin</artifactId>
				<version>1.0-alpha-2</version>
				<executions>
					<execution>
						<phase>generate-resources</phase>
						<goals>
							<goal>pseudo</goal>
						</goals>
					</execution>
				</executions>
				<configuration>
					<pseudoLocale>qc</pseudoLocale>
					<includes>
						<include>**/*.properties</include>
					</includes>
					<excludes>
						<exclude>**/*_*.properties</exclude>
						<exclude>**/components.properties</exclude>
						<exclude>**/seam.properties</exclude>
						<exclude>**/seam-deployment.properties</exclude>
						<exclude>**/eventservice.properties</exclude>
						<exclude>**/pluralforms.properties</exclude>
					</excludes>
					<inputDirectory>src/main/resources</inputDirectory>
                    <outputDirectory>${project.build.outputDirectory}</outputDirectory>
				</configuration>
			</plugin>
			<plugin>
				<artifactId>maven-deploy-plugin</artifactId>
				<!-- zanata war is too big to deploy, especially with five variants -->
				<configuration>
               <!-- MEAD builds must deploy all artifacts, so we run them with -Dallow.deploy.skip=false -->
					<skip>${allow.deploy.skip}</skip>
				</configuration>
			</plugin>

      <plugin>
        <groupId>org.codehaus.mojo</groupId>
        <artifactId>hibernate3-maven-plugin</artifactId>
        <version>2.2</version>
        <configuration>
          <components>
            <component>
              <name>hbm2ddl</name>
              <implementation>jpaconfiguration</implementation>
            </component>
          </components>
          <componentProperties>
            <export>false</export>
            <update>false</update>
            <drop>false</drop>
            <create>false</create>
            <outputfilename>schema.ddl</outputfilename>
            <persistenceunit>zanataTestDatasourcePU</persistenceunit>
          </componentProperties>
        </configuration>
<!--
        <executions>
          <execution>
            <phase>process-test-classes</phase>
            <goals>
              <goal>hbm2ddl</goal>
            </goals>
          </execution>
        </executions>
-->
        <dependencies>
<!--
          <dependency>
                <groupId>mysql</groupId>
                <artifactId>mysql-connector-java</artifactId>
                <version>5.1.9</version>
          </dependency>
 -->
          <dependency>
            <groupId>com.h2database</groupId>
            <artifactId>h2</artifactId>
            <version>1.3.170</version>
          </dependency>
        </dependencies>
      </plugin>


			<!--
				This is to make the GWT plugin happy (http://code.google.com/p/google-web-toolkit/issues/detail?id=4600).
				Taken from https://issues.sonatype.org/browse/MNGECLIPSE-864?focusedCommentId=148457&page=com.atlassian.jira.plugin.system.issuetabpanels:comment-tabpanel#comment-148457
				See also https://code.google.com/p/gwt-m2e/
			-->
			<plugin>
				<groupId>com.google.code.maven-replacer-plugin</groupId>
				<artifactId>maven-replacer-plugin</artifactId>
				<version>1.4.0</version>
				<executions>
					<execution>
						<phase>clean</phase>
						<goals>
							<goal>replace</goal>
						</goals>
					</execution>
				</executions>
				<configuration>
					<ignoreMissingFile>true</ignoreMissingFile>
					<file>.classpath</file>
					<regex>false</regex>
					<replacements>
						<replacement>
							<xpath>/classpath/classpathentry[@path='src/main/resources' and @kind='src' and @excluding='**']/@excluding</xpath>
							<token>**</token>
							<value />
						</replacement>
					</replacements>
				</configuration>
			</plugin>

            <plugin>
                <groupId>org.codehaus.gmaven</groupId>
                <artifactId>gmaven-plugin</artifactId>
                <version>1.4</version>
                <configuration>
                    <providerSelection>${gmavenProviderSelection}</providerSelection>
                    <sourceEncoding>UTF-8</sourceEncoding>
                </configuration>
                <executions>
                    <execution>
                        <goals>
                            <!-- Uncomment to enable groovy in the main source -->
                            <!--<goal>generateStubs</goal>-->
                            <!--<goal>compile</goal>-->
                            <goal>generateTestStubs</goal>
                            <goal>testCompile</goal>
                        </goals>
                    </execution>
                </executions>
                <dependencies>
			      <dependency>
			          <groupId>org.codehaus.gmaven.runtime</groupId>
			          <artifactId>gmaven-runtime-2.0</artifactId>
			          <version>1.4</version>
			          <exclusions>
			            <exclusion>
			              <groupId>org.codehaus.groovy</groupId>
			              <artifactId>groovy-all</artifactId>
			            </exclusion>
			          </exclusions>
			        </dependency>
                    <dependency>
                        <groupId>org.codehaus.groovy</groupId>
                        <artifactId>groovy-all</artifactId>
                        <version>${groovyVersion}</version>
                    </dependency>
                </dependencies>
            </plugin>

		</plugins>

		<pluginManagement>
			<plugins>
				<!--This plugin's configuration is used to store Eclipse m2e settings only. It has no influence on the Maven build itself.-->
				<plugin>
					<groupId>org.eclipse.m2e</groupId>
					<artifactId>lifecycle-mapping</artifactId>
					<version>1.0.0</version>
					<configuration>
						<lifecycleMappingMetadata>
							<pluginExecutions>
								<pluginExecution>
									<pluginExecutionFilter>
										<groupId>
											org.codehaus.mojo
										</groupId>
										<artifactId>
											l10n-maven-plugin
										</artifactId>
										<versionRange>
											[1.0-alpha-2,)
										</versionRange>
										<goals>
											<goal>pseudo</goal>
										</goals>
									</pluginExecutionFilter>
									<action>
										<ignore />
									</action>
								</pluginExecution>
								<pluginExecution>
									<pluginExecutionFilter>
										<groupId>
											org.codehaus.enunciate
										</groupId>
										<artifactId>
											maven-enunciate-plugin
										</artifactId>
										<versionRange>[1.9-RC1,)</versionRange>
										<goals>
											<goal>assemble</goal>
										</goals>
									</pluginExecutionFilter>
									<action>
										<ignore />
									</action>
								</pluginExecution>
								<pluginExecution>
								    <pluginExecutionFilter>
								        <groupId>
								            org.codehaus.mojo
								        </groupId>
								        <artifactId>
								            hibernate3-maven-plugin
								        </artifactId>
								        <versionRange>
								            [2.2,)
								        </versionRange>
								        <goals>
								            <goal>hbm2ddl</goal>
								        </goals>
								    </pluginExecutionFilter>
								    <action>
								        <ignore />
								    </action>
								</pluginExecution>
								<pluginExecution>
								    <pluginExecutionFilter>
								        <groupId>
								            org.apache.maven.plugins
								        </groupId>
								        <artifactId>
								            maven-antrun-plugin
								        </artifactId>
								        <versionRange>
								            [1.7,)
								        </versionRange>
								        <goals>
								            <goal>run</goal>
								        </goals>
								    </pluginExecutionFilter>
								    <action>
								        <ignore />
								    </action>
								</pluginExecution>
								<pluginExecution>
								    <pluginExecutionFilter>
								        <groupId>
								            org.apache.maven.plugins
								        </groupId>
								        <artifactId>
								            maven-dependency-plugin
								        </artifactId>
								        <versionRange>
								            [2.4,)
								        </versionRange>
								        <goals>
								            <goal>properties</goal>
								        </goals>
								    </pluginExecutionFilter>
								    <action>
								        <ignore />
								    </action>
								</pluginExecution>
								<pluginExecution>
								    <pluginExecutionFilter>
								        <groupId>
								            org.codehaus.gmaven
								        </groupId>
								        <artifactId>
								            gmaven-plugin
								        </artifactId>
								        <versionRange>
								            [1.4,)
								        </versionRange>
								        <goals>
								            <goal>testCompile</goal>
								            <goal>
								                generateTestStubs
								            </goal>
								        </goals>
								    </pluginExecutionFilter>
								    <action>
								        <execute />
								    </action>
								</pluginExecution>
							</pluginExecutions>
						</lifecycleMappingMetadata>
					</configuration>
				</plugin>
			</plugins>
		</pluginManagement>
	</build>

   <reporting>
      <plugins>
         <plugin>
            <groupId>org.codehaus.enunciate</groupId>
            <artifactId>maven-enunciate-plugin</artifactId>
            <!-- apparently pluginManagement is ignored in reporting -->
            <version>${enunciate.version}</version>
            <configuration>
               <configFile>etc/enunciate/enunciate.xml</configFile>

               <!--
               These two enunciate options are undocumented, but
               their absence causes an error during site generation.
                -->
               <enunciateArtifactId>unused</enunciateArtifactId>
               <moduleName>unused</moduleName>

               <!-- The subdirectory of the site where the documentation will be put. -->
               <!-- Note that if this isn't set, the documentation will overwrite the site. -->
               <docsSubdir>apidocs</docsSubdir>
            </configuration>
         </plugin>
      </plugins>
   </reporting>

	<profiles>
		<profile>
			<id>explode</id>
			<activation>
				<property>
					<name>env</name>
					<value>dev</value>
				</property>
			</activation>
			<properties>
				<!-- common config for Cargo -->
				<port>8080</port>
				<installDir>${java.io.tmpdir}/cargo/installs</installDir>
			</properties>
			<build>
				<plugins>
					<plugin>
						<groupId>org.codehaus.cargo</groupId>
						<artifactId>cargo-maven2-plugin</artifactId>
						<version>1.1.0</version>
						<executions>
							<execution>
								<phase>package</phase>
								<goals>
									<goal>redeploy</goal>
								</goals>
							</execution>
						</executions>
						<configuration>
							<wait>false</wait>
							<container>
								<containerId>${containerId}</containerId>
							</container>
							<configuration>
								<type>existing</type>
								<home>${jboss.home}/server/default</home>
							</configuration>
							<deployer>
								<deployables>
									<deployable>
										<pingURL>http://localhost:${port}/${war.name}/</pingURL>
										<location>${project.build.directory}/zanata</location>
										<properties>
											<context>zanata</context>
										</properties>
									</deployable>
								</deployables>
							</deployer>
						</configuration>
					</plugin>
					<plugin>
						<groupId>org.apache.maven.plugins</groupId>
						<artifactId>maven-resources-plugin</artifactId>
						<executions>
							<execution>
								<id>copy-ds-context</id>
								<goals>
									<goal>copy-resources</goal>
								</goals>
								<phase>package</phase>
								<configuration>
									<outputDirectory>${as.deploy}</outputDirectory>
									<resources>
										<resource>
											<directory>${basedir}/src/etc</directory>
											<filtering>true</filtering>
											<includes>
												<include>zanata-ds.xml</include>
											</includes>
										</resource>
									</resources>
								</configuration>
							</execution>
						</executions>
					</plugin>
					<!-- <plugin> <groupId>org.codehaus.mojo</groupId> <artifactId>jboss-maven-plugin</artifactId> 
						<version>1.4</version> <configuration> <serverName>default</serverName> </configuration> 
						<executions> <execution> <id>deploy-ds</id> <phase>package</phase> <goals><goal>hard-deploy</goal></goals> 
						<configuration> <fileName>${project.build.directory}/classes/zanata-ds.xml</fileName> 
						</configuration> </execution> <execution> <id>deploy-war-unpacked</id> <phase>package</phase> 
						<goals><goal>hard-deploy</goal></goals> <configuration> <fileName>${project.build.directory}/zanata.war</fileName> 
						<unpack>true</unpack> </configuration> </execution> </executions> </plugin> -->
				</plugins>
			</build>
		</profile>
		
		<profile>
			<id>nogwt</id>
			<properties>
				<gwt.compiler.skip>true</gwt.compiler.skip>
			</properties>
		</profile>

		<profile>
			<!-- This profile tells GWT to use an alternative GWT module which has 
				only one permutation, and to compile in draft mode -->
			<id>chrome</id>
			<properties>
				<zanata.gwt.module>org.zanata.webtrans.ApplicationSafari</zanata.gwt.module>
			</properties>
			<build>
				<plugins>
					<plugin>
						<groupId>org.codehaus.mojo</groupId>
						<artifactId>gwt-maven-plugin</artifactId>
						<configuration>
							<draftCompile>true</draftCompile>
							<style>PRETTY</style>
						</configuration>
					</plugin>
				</plugins>
			</build>
		</profile>

		<profile>
			<!-- This profile tells GWT to use an alternative GWT module which has 
				only one permutation, and to compile in draft mode -->
			<id>firefox</id>
			<properties>
				<zanata.gwt.module>org.zanata.webtrans.ApplicationGecko18</zanata.gwt.module>
			</properties>
			<build>
				<plugins>
					<plugin>
						<groupId>org.codehaus.mojo</groupId>
						<artifactId>gwt-maven-plugin</artifactId>
						<configuration>
							<draftCompile>true</draftCompile>
							<style>PRETTY</style>
						</configuration>
					</plugin>
				</plugins>
			</build>
		</profile>

        <profile>
            <!-- This profile tells GWT to use an alternative GWT module which has
                    only one permutation, and to compile in draft mode -->
            <id>chromefirefox</id>
            <properties>
                <zanata.gwt.module>org.zanata.webtrans.ApplicationChromeFirefox</zanata.gwt.module>
            </properties>
            <build>
                <plugins>
                    <plugin>
                        <groupId>org.codehaus.mojo</groupId>
                        <artifactId>gwt-maven-plugin</artifactId>
                        <configuration>
                            <draftCompile>true</draftCompile>
                            <style>PRETTY</style>
                        </configuration>
                    </plugin>
                </plugins>
            </build>
        </profile>

		<profile>
			<id>eclipse</id>
			<build>
				<finalName>zanata-dev</finalName>
				<resources>
					<resource>
						<directory>src/main/resources-dev</directory>
						<filtering>false</filtering>
					</resource>
				</resources>

				<plugins>
					<plugin>
						<groupId>org.apache.maven.plugins</groupId>
						<artifactId>maven-eclipse-plugin</artifactId>
                  <version>2.9</version>
						<configuration>
							<wtpversion>2.0</wtpversion>

							<additionalBuildcommands>
								<buildCommand>
									<name>com.google.gdt.eclipse.core.webAppProjectValidator</name>
								</buildCommand>
								<buildCommand>
									<name>com.google.gwt.eclipse.core.gwtProjectValidator</name>
								</buildCommand>
							</additionalBuildcommands>

							<additionalProjectnatures>
								<projectnature>com.google.gwt.eclipse.core.gwtNature</projectnature>
								<projectnature>com.google.gdt.eclipse.core.webAppNature</projectnature>
							</additionalProjectnatures>

							<classpathContainers>
								<classpathContainer>org.eclipse.jdt.launching.JRE_CONTAINER</classpathContainer>
								<classpathContainer>com.google.gwt.eclipse.core.GWT_CONTAINER</classpathContainer>
							</classpathContainers>
							<excludes>
								<!-- These are provided by the GWT container -->
								<exclude>com.google.gwt:gwt-servlet</exclude>
								<exclude>com.google.gwt:gwt-user</exclude>
							</excludes>
						</configuration>
					</plugin>

				</plugins>

			</build>
		</profile>

        <profile>
            <id>it-coverage</id>
            <!-- In order to combine unit test and integration test coverage together, it requires below two commands:
            mvn clean verify -Pit-coverage,nogwt
            mvn cobertura:cobertura
            Adding -Dcobertura.report.format=html to the second command will output report as html.
            Jenkins requires xml format.
            -->
            <build>
                <plugins>
                    <plugin>
                        <groupId>org.codehaus.mojo</groupId>
                        <artifactId>cobertura-it-maven-plugin</artifactId>
                        <version>2.5</version>
                        <configuration>
                            <instrumentation>
                                <excludes>
                                    <!--WebTran exclusion-->
                                    <!--TODO move all gwt wrapper class under specific package. i.e boundary-->
                                    <!--<exclude>**/boundary/**/*</exclude>-->
                                    <exclude>**/test/**/*</exclude>
                                    <!--<exclude>**/supersource/**/*</exclude>-->
                                    <exclude>**/client/**/*View</exclude>
                                    <exclude>**/client/Application*</exclude>
                                    <exclude>**/client/auth/**</exclude>
                                    <exclude>**/client/events/**</exclude>
                                    <exclude>**/client/gin/**</exclude>
                                    <exclude>**/client/rpc/**</exclude>
                                    <exclude>**/client/ui/**</exclude>
                                    <exclude>**/client/view/**</exclude>
                                    <exclude>**/EventWrapperImpl*</exclude>
                                    <exclude>**/*DataProvider*</exclude>
                                    <exclude>**/*SelectionModel*</exclude>
                                    <!--below are some trivial classes(java bean) at the moment-->
                                    <exclude>**/shared/auth/**</exclude>
                                    <exclude>**/shared/model/**</exclude>
                                    <exclude>**/shared/rpc/**</exclude>

                                    <!--Server exclusion-->
                                    <exclude>**/job/**</exclude>
                                    <exclude>**/liquibase/**</exclude>
                                    <exclude>**/log4j/**</exclude>
                                    <exclude>**/seam/**</exclude>
                                    <exclude>**/rest/files/*</exclude>
                                    <exclude>**/rest/*Mapper</exclude>
                                    <exclude>**/openid/*</exclude>
                                    <exclude>**/servlet/*</exclude>

                                    <!--General exclusion-->
                                    <exclude>**/*Exception*</exclude>
                                </excludes>
                            </instrumentation>
                            <formats>
                                <format>xml</format>
                            </formats>
                            <check>
                                <haltOnFailure>false</haltOnFailure>
                            </check>
                        </configuration>
                        <executions>
                            <execution>
                                <id>cobertura-clean</id>
                                <phase>clean</phase>
                                <goals>
                                    <goal>clean</goal>
                                </goals>
                            </execution>
                            <execution>
                                <id>cobertura-instrument</id>
                                <phase>process-classes</phase>
                                <goals>
                                    <goal>instrument</goal>
                                </goals>
                            </execution>
                            <execution>
                                <id>cobertura-check-only</id>
                                <phase>verify</phase>
                                <goals>
                                    <goal>check-only</goal>
                                </goals>
                            </execution>
                        </executions>
                    </plugin>
                </plugins>
            </build>

            <reporting>
                <plugins>
                    <plugin>
                        <groupId>org.codehaus.mojo</groupId>
                        <artifactId>cobertura-it-maven-plugin</artifactId>
                        <configuration>
                            <formats>
                                <format>html</format>
                                <!--<format>xml</format>-->
                            </formats>
                        </configuration>
                        <reportSets>
                            <reportSet>
                                <reports>
                                    <report>report-only</report>
                                </reports>
                            </reportSet>
                        </reportSets>
                    </plugin>
                </plugins>
            </reporting>
        </profile>
	</profiles>

	<dependencies>

        <!-- Zanata-specific dependencies -->

		<dependency>
			<groupId>org.zanata</groupId>
			<artifactId>zanata-common-api</artifactId>
            <exclusions>
                <exclusion>
                    <artifactId>
                        servlet-api
                    </artifactId>
                    <groupId>
                        javax.servlet
                    </groupId>
                </exclusion>
            </exclusions>
		</dependency>

		<dependency>
			<groupId>org.zanata</groupId>
			<artifactId>zanata-common-util</artifactId>
		</dependency>

		<dependency>
			<groupId>org.zanata</groupId>
			<artifactId>zanata-model</artifactId>
		</dependency>
		
		<dependency>
            <groupId>org.zanata</groupId>
            <artifactId>zanata-adapter-po</artifactId>
        </dependency>
        
        <dependency>
            <groupId>org.zanata</groupId>
            <artifactId>zanata-adapter-glossary</artifactId>
        </dependency>
		
      <dependency>
         <groupId>org.zanata</groupId>
         <artifactId>zanata-rest-client</artifactId>
         <scope>test</scope>
      </dependency>
      <dependency>
         <groupId>org.zanata</groupId>
         <artifactId>zanata-rest-client</artifactId>
         <type>test-jar</type>
         <scope>test</scope>
      </dependency>

		<!-- Compatibility Dependencies -->

        <dependency>
            <groupId>org.zanata</groupId>
            <artifactId>zanata-common-api</artifactId>
            <version>${zanata.api.compat.version}</version>
            <classifier>compat</classifier>
        </dependency>

      <!-- GWT Dependencies -->
      <dependency>
         <groupId>com.google.gwt</groupId>
         <artifactId>gwt-dev</artifactId>
         <scope>runtime</scope>
      </dependency>

      <dependency>
         <groupId>com.google.gwt</groupId>
         <artifactId>gwt-servlet</artifactId>
         <scope>runtime</scope>
      </dependency>

      <dependency>
         <groupId>com.google.gwt</groupId>
         <artifactId>gwt-user</artifactId>
         <scope>provided</scope>
      </dependency>

      <!-- NB: This must be before jboss-seam, because beanutils includes old commons collections classes -->
      <dependency>
         <groupId>commons-collections</groupId>
         <artifactId>commons-collections</artifactId>
      </dependency>

		<!-- Seam Dependencies -->

		<dependency>
			<groupId>org.jboss.seam</groupId>
			<artifactId>jboss-seam</artifactId>
			<type>ejb</type>
		</dependency>

		<dependency>
			<groupId>org.jboss.seam</groupId>
			<artifactId>jboss-seam-ui</artifactId>
		</dependency>

		<dependency>
			<!-- TODO this should be excluded in production -->
			<groupId>org.jboss.seam</groupId>
			<artifactId>jboss-seam-debug</artifactId>
		</dependency>

		<dependency>
			<groupId>org.jboss.seam</groupId>
			<artifactId>jboss-seam-mail</artifactId>
		</dependency>

		<dependency>
			<groupId>org.jboss.seam</groupId>
			<artifactId>jboss-seam-remoting</artifactId>
		</dependency>

		<!-- RestEasy dependencies -->

		<dependency>
			<groupId>org.jboss.seam</groupId>
			<artifactId>jboss-seam-resteasy</artifactId>
		</dependency>
		<dependency>
			<groupId>org.jboss.resteasy</groupId>
			<artifactId>resteasy-jaxrs</artifactId>
            <exclusions>
                <exclusion>
                    <groupId>javassist</groupId>
                    <artifactId>javassist</artifactId>
                </exclusion>
            </exclusions>
		</dependency>
		<dependency>
			<groupId>org.jboss.resteasy</groupId>
			<artifactId>resteasy-jaxb-provider</artifactId>
		</dependency>
		<dependency>
			<groupId>org.jboss.resteasy</groupId>
			<artifactId>resteasy-jackson-provider</artifactId>
		</dependency>

		<dependency>
			<groupId>org.jboss.resteasy</groupId>
			<artifactId>resteasy-multipart-provider</artifactId>
			<exclusions>
							<exclusion>
											<artifactId>
															servlet-api
											</artifactId>
											<groupId>
															javax.servlet
											</groupId>
							</exclusion>
			</exclusions>
		</dependency>
		<dependency>
			<groupId>org.codehaus.jackson</groupId>
			<artifactId>jackson-core-asl</artifactId>
		</dependency>
		<dependency>
			<groupId>org.codehaus.jackson</groupId>
			<artifactId>jackson-mapper-asl</artifactId>
		</dependency>
		<dependency>
			<groupId>org.codehaus.jackson</groupId>
			<artifactId>jackson-jaxrs</artifactId>
		</dependency>
		<dependency>
			<groupId>org.codehaus.jackson</groupId>
			<artifactId>jackson-xc</artifactId>
		</dependency>


		<!-- Drools -->

		<dependency>
			<groupId>org.drools</groupId>
			<artifactId>drools-core</artifactId>
		</dependency>

		<dependency>
			<groupId>org.drools</groupId>
			<artifactId>drools-compiler</artifactId>
			<exclusions>
			    <exclusion>
			        <artifactId>ecj</artifactId>
			        <groupId>org.eclipse.jdt.core.compiler</groupId>
			    </exclusion>
			</exclusions>
		</dependency>

		<!-- Richfaces -->

        <dependency>
            <groupId>org.richfaces.ui</groupId>
            <artifactId>richfaces-components-ui</artifactId>
        </dependency>

        <dependency>
            <groupId>org.richfaces.core</groupId>
            <artifactId>richfaces-core-impl</artifactId>
            <scope>runtime</scope>
        </dependency>

        <dependency>
            <groupId>com.sun.faces</groupId>
            <artifactId>jsf-impl</artifactId>
            <version>2.1.13</version>
        </dependency>

		<!-- Hibernate / JPA -->

		<dependency>
			<groupId>org.hibernate</groupId>
			<artifactId>hibernate-core</artifactId>
			<scope>${hibernate.scope}</scope>
		</dependency>

        <dependency>
            <groupId>org.hibernate</groupId>
            <artifactId>hibernate-ehcache</artifactId>
        </dependency>

		<dependency>
			<groupId>org.hibernate</groupId>
			<artifactId>hibernate-validator</artifactId>
			<scope>${hibernate.scope}</scope>
		</dependency>

		<dependency>
			<groupId>org.hibernate</groupId>
			<artifactId>hibernate-entitymanager</artifactId>
			<scope>${hibernate.scope}</scope>
			<exclusions>
            <!-- we use javax.persistence:persistence-api -->
            <exclusion>
               <artifactId>ejb3-persistence</artifactId>
               <groupId>org.hibernate</groupId>
            </exclusion>
			</exclusions>
		</dependency>

        <dependency>
            <groupId>org.hibernate</groupId>
            <artifactId>hibernate-testing</artifactId>
            <scope>test</scope>
        </dependency>

		<dependency>
			<groupId>javax.transaction</groupId>
			<artifactId>jta</artifactId>
			<scope>provided</scope>
		</dependency>

      <dependency>
         <groupId>net.sf.ehcache</groupId>
         <artifactId>ehcache-core</artifactId>
         <version>2.5.1</version>
      </dependency>

        <!-- Okapi Filters -->

        <dependency>
            <groupId>net.sf.okapi.filters</groupId>
            <artifactId>okapi-filter-dtd</artifactId>
        </dependency>
        <dependency>
            <groupId>net.sf.okapi.filters</groupId>
            <artifactId>okapi-filter-idml</artifactId>
        </dependency>
        <dependency>
            <groupId>net.sf.okapi.filters</groupId>
            <artifactId>okapi-filter-openoffice</artifactId>
        </dependency>
        <dependency>
            <groupId>net.sf.okapi.filters</groupId>
            <artifactId>okapi-filter-plaintext</artifactId>
        </dependency>
        <dependency>
            <groupId>net.sf.okapi.filters</groupId>
            <artifactId>okapi-filter-tmx</artifactId>
        </dependency>

        <dependency>
          <groupId>net.sf.okapi</groupId>
          <artifactId>okapi-core</artifactId>
        </dependency>


		<!-- Other -->

		<dependency>
			<groupId>org.dbunit</groupId>
			<artifactId>dbunit</artifactId>
            <scope>test</scope>
		</dependency>

		<dependency>
			<groupId>org.tuckey</groupId>
			<artifactId>urlrewritefilter</artifactId>
            <version>4.0.4</version>
		</dependency>

		<dependency>
			<groupId>com.ibm.icu</groupId>
			<artifactId>icu4j</artifactId>
		</dependency>

		<dependency>
			<groupId>commons-lang</groupId>
			<artifactId>commons-lang</artifactId>
		</dependency>

		<dependency>
			<groupId>org.slf4j</groupId>
			<artifactId>slf4j-api</artifactId>
         <scope>provided</scope>
		</dependency>

        <dependency>
            <groupId>net.sourceforge.openutils</groupId>
            <artifactId>openutils-log4j</artifactId>
            <version>2.0.5</version>
        </dependency>

		<dependency>
			<groupId>com.google.guava</groupId>
			<artifactId>guava</artifactId>
		</dependency>

 		<!--to enable guava on gwt-->
        <dependency>
            <groupId>com.google.guava</groupId>
            <artifactId>guava-gwt</artifactId>
        </dependency>
        <dependency>
            <groupId>com.google.code.findbugs</groupId>
            <artifactId>jsr305</artifactId>
        </dependency>

        <dependency>
            <groupId>net.bull.javamelody</groupId>
            <artifactId>javamelody-core</artifactId>
            <version>1.41.0</version>
        </dependency>

		<dependency>
			<groupId>org.fedorahosted.openprops</groupId>
			<artifactId>openprops</artifactId>
		</dependency>
		
		<dependency>
			<groupId>org.codehaus.enunciate</groupId>
			<artifactId>enunciate-core-annotations</artifactId>
			<version>${enunciate.version}</version>
		</dependency>
		
		<!-- Quartz -->
		
		<dependency>
            <groupId>quartz</groupId>
            <artifactId>quartz</artifactId>
        </dependency>

		<dependency>
			<groupId>org.apache.lucene</groupId>
			<artifactId>lucene-core</artifactId>
			<!-- okapi-lib-search would otherwise use lucene 3.0.0 -->
			<version>${lucene.version}</version>
		</dependency>

        <!-- Solr dependencies -->
        <dependency>
            <groupId>org.apache.solr</groupId>
            <artifactId>solr-core</artifactId>
            <exclusions>
                <exclusion>
                    <groupId>org.apache.commons</groupId>
                    <artifactId>commons-io</artifactId>
                </exclusion>
                <exclusion>
                				<artifactId>servlet-api</artifactId>
                				<groupId>javax.servlet</groupId>
                </exclusion>
            </exclusions>
        </dependency>
		  <dependency>
			    <groupId>org.apache.solr</groupId>
			    <artifactId>solr-solrj</artifactId>
		  </dependency>
		
		<!-- JBoss 5 Provided Dependencies -->
		<dependency>
			<groupId>org.hibernate</groupId>
			<artifactId>hibernate-search</artifactId>
			<exclusions>
				<exclusion>
					<groupId>org.hibernate</groupId>
					<artifactId>hibernate-commons-annotations</artifactId>
				</exclusion>
				<!-- we use javax.persistence:persistence-api -->
				<exclusion>
					<groupId>org.hibernate</groupId>
					<artifactId>ejb3-persistence</artifactId>
				</exclusion>
			</exclusions>
		</dependency>

		<dependency>
			<groupId>org.hibernate</groupId>
			<artifactId>hibernate-search-analyzers</artifactId>
		</dependency>

		<dependency>
			<groupId>commons-logging</groupId>
			<artifactId>commons-logging</artifactId>
			<scope>provided</scope>
		</dependency>

		<dependency>
			<groupId>javax.el</groupId>
			<artifactId>el-api</artifactId>
			<scope>provided</scope>
		</dependency>

		<dependency>
			<groupId>javax.servlet</groupId>
			<artifactId>javax.servlet-api</artifactId>
			<scope>provided</scope>
		</dependency>

		<dependency>
			<groupId>javax.servlet.jsp</groupId>
			<artifactId>jsp-api</artifactId>
			<version>2.2</version>
			<scope>provided</scope>
		</dependency>

        <dependency>
            <groupId>log4j</groupId>
            <artifactId>log4j</artifactId>
            <scope>provided</scope>
        </dependency>

        <dependency>
            <groupId>javax.mail</groupId>
            <artifactId>mail</artifactId>
            <scope>provided</scope>
        </dependency>

		<dependency>
			<groupId>org.hamcrest</groupId>
			<artifactId>hamcrest-core</artifactId>
			<scope>test</scope>
        </dependency>

        <dependency>
            <groupId>org.hamcrest</groupId>
            <artifactId>hamcrest-library</artifactId>
            <scope>test</scope>
        </dependency>

<!--
		<dependency>
			<groupId>javassist</groupId>
			<artifactId>javassist</artifactId>
			<scope>provided</scope>
		</dependency>
-->

<!--
		<dependency>
			<groupId>javax.faces</groupId>
			<artifactId>jsf-api</artifactId>
			<scope>provided</scope>
		</dependency>

		<dependency>
			<groupId>com.sun.faces</groupId>
			<artifactId>jsf-impl</artifactId>
			<scope>provided</scope>
		</dependency>
-->

		<dependency>
			<groupId>javax.annotation</groupId>
			<artifactId>jsr250-api</artifactId>
			<scope>provided</scope>
		</dependency>

		<dependency>
			<groupId>javax.xml.stream</groupId>
			<artifactId>stax-api</artifactId>
			<scope>provided</scope>
		</dependency>
<!-- 
		<dependency>
			<groupId>xpp3</groupId>
			<artifactId>xpp3_min</artifactId>
			<scope>provided</scope>
		</dependency>
 -->
		<!-- Container dependencies - provided by jboss -->

		<dependency>
			<groupId>commons-codec</groupId>
			<artifactId>commons-codec</artifactId>
		</dependency>

		<dependency>
			<groupId>commons-httpclient</groupId>
			<artifactId>commons-httpclient</artifactId>
		</dependency>

		<!-- needed by H2 triggers -->
		<dependency>
			<groupId>com.h2database</groupId>
			<artifactId>h2</artifactId>
			<scope>provided</scope>
		</dependency>

		<!-- Testing dependencies -->

		<!--<dependency>
			<groupId>org.jboss.embedded</groupId>
			<artifactId>jboss-embedded-all</artifactId>
			<version>${jboss.embedded.version}</version>
			<exclusions>
				<exclusion>
					<groupId>org.jboss.microcontainer</groupId>
					<artifactId>jboss-deployers-client-spi</artifactId>
				</exclusion>
				<exclusion>
					<groupId>org.jboss.embedded</groupId>
					<artifactId>jboss-embedded</artifactId>
				</exclusion>
			</exclusions>
			<scope>test</scope>
		</dependency>

		<dependency>
			<groupId>org.jboss.embedded</groupId>
			<artifactId>thirdparty-all</artifactId>
			<version>${jboss.embedded.version}</version>
			<scope>test</scope>
		</dependency>

		<dependency>
			<groupId>org.jboss.seam.embedded</groupId>
			<artifactId>jboss-embedded-api</artifactId>
			<version>${jboss.embedded.version}</version>
			<exclusions>
				<exclusion>
					<groupId>org.jboss.microcontainer</groupId>
					<artifactId>jboss-deployers-client-spi</artifactId>
				</exclusion>
			</exclusions>
			<scope>test</scope>
		</dependency>-->

        <!-- This must appear before arquillian dependencies -->
        <dependency>
            <groupId>org.projectlombok</groupId>
            <artifactId>lombok</artifactId>
            <scope>provided</scope>
        </dependency>

        <!-- Arquillian 1.0.4 should eliminate the need for this dependency.
         See https://bugzilla.redhat.com/show_bug.cgi?id=871413 -->
        <!--<dependency>
            <groupId>org.jboss.remoting3</groupId>
            <artifactId>jboss-remoting</artifactId>
            <version>3.2.14.GA</version>
            <scope>provided</scope>
        </dependency>-->

        <dependency>
            <groupId>org.jboss.arquillian.junit</groupId>
            <artifactId>arquillian-junit-container</artifactId>
            <scope>test</scope>
        </dependency>

        <dependency>
            <groupId>org.jboss.as</groupId>
            <artifactId>jboss-as-arquillian-container-managed</artifactId>
            <version>7.1.3.Final</version>
            <scope>test</scope>
        </dependency>

        <dependency>
            <groupId>org.jboss.arquillian.extension</groupId>
            <artifactId>arquillian-seam2</artifactId>
            <version>1.0.0.Alpha2</version>
            <exclusions>
                <!-- This obsolete package duplicates some of the classes found in the newer descriptors-spi package -->
                <exclusion>
                    <groupId>org.jboss.shrinkwrap.descriptors</groupId>
                    <artifactId>shrinkwrap-descriptors-api</artifactId>
                </exclusion>
            </exclusions>
            <scope>test</scope>
        </dependency>

        <dependency>
            <groupId>org.jboss.arquillian.protocol</groupId>
            <artifactId>arquillian-protocol-servlet</artifactId>
            <scope>test</scope>
        </dependency>

        <dependency>
            <groupId>mysql</groupId>
            <artifactId>mysql-connector-java</artifactId>
            <version>5.1.9</version>
            <scope>test</scope>
        </dependency>

		<dependency>
			<groupId>junit</groupId>
			<artifactId>junit</artifactId>
			<scope>test</scope>
		</dependency>

        <dependency>
            <groupId>org.concordion</groupId>
            <artifactId>concordion</artifactId>
            <scope>test</scope>
        </dependency>

        <dependency>
            <groupId>org.concordion</groupId>
            <artifactId>concordion-extensions</artifactId>
            <scope>test</scope>
        </dependency>

        <dependency>
            <groupId>org.mockito</groupId>
            <artifactId>mockito-core</artifactId>
        </dependency>

		<dependency>
			<groupId>org.testng</groupId>
			<artifactId>testng</artifactId>
			<!-- We use testng in DBUnitImporter so can't use test scope here -->
		</dependency>

        <!-- GMaven and Groovy (for groovy tests) -->
        <dependency>
            <groupId>org.codehaus.groovy</groupId>
            <artifactId>groovy-all</artifactId>
            <version>${groovyVersion}</version>
            <scope>test</scope>
        </dependency>

		<!-- GWT related dependencies -->

		<dependency>
			<groupId>commons-fileupload</groupId>
			<artifactId>commons-fileupload</artifactId>
		</dependency>

		<dependency>
			<!-- needed for GWT compilation of JAXB annotated classes -->
			<groupId>javax.xml.bind</groupId>
			<artifactId>jaxb-api</artifactId>
			<classifier>sources</classifier>
			<scope>provided</scope>
		</dependency>

		<dependency>
			<groupId>com.google.gwt.inject</groupId>
			<artifactId>gin</artifactId>
		</dependency>

		<dependency>
			<groupId>com.google.inject</groupId>
			<artifactId>guice</artifactId>
		</dependency>

		<dependency>
			<groupId>net.customware.gwt.dispatch</groupId>
			<artifactId>gwt-dispatch</artifactId>
			<version>1.0.0</version>
		</dependency>

		<dependency>
			<groupId>net.customware.gwt.presenter</groupId>
			<artifactId>gwt-presenter</artifactId>
		</dependency>

		<dependency>
			<groupId>com.allen-sauer.gwt.log</groupId>
			<artifactId>gwt-log</artifactId>
			<version>3.1.8</version>
		</dependency>

        <dependency>
            <groupId>de.novanic.gwteventservice</groupId>
            <artifactId>eventservice</artifactId>
        </dependency>

        <dependency>
			<groupId>de.novanic.gwteventservice</groupId>
			<artifactId>gwteventservice</artifactId>
		</dependency>

        <dependency>
            <groupId>de.novanic.gwteventservice</groupId>
            <artifactId>eventservice-rpc</artifactId>
        </dependency>

        <!-- end of GWT related dependencies -->

		<dependency>
			<groupId>org.liquibase</groupId>
			<artifactId>liquibase-core</artifactId>
		</dependency>
		
		<dependency>
			<groupId>org.liquibase.ext</groupId>
			<artifactId>modify-column</artifactId>
		</dependency>

      <dependency>
         <groupId>com.mattbertolini</groupId>
         <artifactId>liquibase-slf4j</artifactId>
         <version>1.0.0</version>
      </dependency>

		<dependency>
		    <groupId>org.apache.commons</groupId>
		    <artifactId>commons-exec</artifactId>
		    <version>1.1</version>
		</dependency>

		<!-- openid4java -->
	    <dependency>
	       <groupId>org.htmlparser</groupId>
	       <artifactId>htmlparser</artifactId>
	       <version>1.6</version>
	       <exclusions>
	          <!--  htmlparser tries to bring in java.home/lib/tools.jar -->
	          <exclusion>
	             <artifactId>tools</artifactId>
	             <groupId>com.sun</groupId>
	          </exclusion>
	       </exclusions>
	    </dependency>

		<dependency>
			<groupId>org.openid4java</groupId>
			<artifactId>openid4java-nodeps</artifactId>
			<version>0.9.5</version>
		</dependency>

		<dependency>
			<groupId>org.openxri</groupId>
			<artifactId>openxri-client</artifactId>
			<version>1.2.0</version>
			<exclusions>
				<exclusion>
					<groupId>xalan</groupId>
					<artifactId>xalan</artifactId>
				</exclusion>
				<exclusion>
					<groupId>xerces</groupId>
					<artifactId>xercesImpl</artifactId>
				</exclusion>
				<exclusion>
					<groupId>org.slf4j</groupId>
					<artifactId>slf4j-jcl</artifactId>
				</exclusion>
			</exclusions>
		</dependency>

		<dependency>
			<groupId>org.openxri</groupId>
			<artifactId>openxri-syntax</artifactId>
			<version>1.2.0</version>
			<exclusions>
				<exclusion>
					<groupId>org.slf4j</groupId>
					<artifactId>slf4j-jcl</artifactId>
				</exclusion>
			</exclusions>
		</dependency>

		<dependency>
			<groupId>org.picketbox</groupId>
			<artifactId>picketbox</artifactId>
			<version>4.0.14.Final</version>
		</dependency>

		<dependency>
			<groupId>javax.validation</groupId>
			<artifactId>validation-api</artifactId>
		</dependency>

        <dependency>
          <groupId>antlr</groupId>
          <artifactId>antlr</artifactId>
          <scope>provided</scope>
        </dependency>

      <!--  missing dependencies identified by mvn dependency:analyze: -->

        <dependency>
          <groupId>org.fedorahosted.tennera</groupId>
          <artifactId>jgettext</artifactId>
          <version>0.11</version>
        </dependency>
        <dependency>
          <groupId>joda-time</groupId>
          <artifactId>joda-time</artifactId>
          <version>1.6</version>
        </dependency>
        <dependency>
          <groupId>commons-beanutils</groupId>
          <artifactId>commons-beanutils</artifactId>
        </dependency>
        <dependency>
          <groupId>com.beust</groupId>
          <artifactId>jcommander</artifactId>
          <version>1.12</version>
        </dependency>
        <dependency>
          <groupId>commons-io</groupId>
          <artifactId>commons-io</artifactId>
        </dependency>
        <dependency>
          <groupId>javax.inject</groupId>
          <artifactId>javax.inject</artifactId>
          <scope>provided</scope>
        </dependency>
        <dependency>
          <groupId>org.jboss.resteasy</groupId>
          <artifactId>jaxrs-api</artifactId>
          <scope>provided</scope>
        </dependency>
        <dependency>
          <groupId>javax.xml.bind</groupId>
          <artifactId>jaxb-api</artifactId>
          <scope>provided</scope>
        </dependency>
	   <dependency>
	       <groupId>xmlunit</groupId>
	       <artifactId>xmlunit</artifactId>
	       <version>1.4</version>
	   </dependency>
	</dependencies>

</project>
