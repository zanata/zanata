<?xml version="1.0"?>
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
  <!-- Required by Maven, only 4.0.0 is valid -->
  <modelVersion>4.0.0</modelVersion>

  <!-- Import dependencies etc. from parent pom -->
  <parent>
    <groupId>org.zanata</groupId>
    <artifactId>server</artifactId>
    <version>4.0.0-SNAPSHOT</version>
  </parent>
  <artifactId>zanata-editor</artifactId>
  <!-- Assumption: this will inherit version 4.0.0-SNAPSHOT -->
  <name>Zanata Web Editor</name>
  <url>https://github.com/zanata/zanata-server/tree/master/zanata-editor</url>

  <!-- Referenced later in the document with ${tagname}. -->
  <properties>
    <!-- Specified to ensure build is consistent cross-platform. -->
    <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>

    <!-- Directory to run the build from. Source is copied here before installing
         dependencies to this location then running the build. -->
    <build.directory>${project.build.directory}/web</build.directory>

    <!-- Directory that contains the actual built editor app (index, script and styles) -->
    <built.artifact.directory>${build.directory}/app/build</built.artifact.directory>

    <!-- Path within the jar to put the built artifacts.
         Note: META-INF/resources/* is served as static content, so this puts
               the editor at http://<server>/app -->
    <bundle.destination>${project.build.outputDirectory}/META-INF/resources/app</bundle.destination>
  </properties>

  <dependencies>
  </dependencies>

  <build>
    <!-- Copy all the source files to the build directory.
         This is done to keep the original source directory clean, because the
         build will download dependencies and places built artifacts in the
         same directory as the source files.
         This happens in phase process-resources. -->
    <resources>
      <resource>
        <!-- Path from pom to the source files that will be used. -->
        <directory>src</directory>
        <!-- Location to copy source files to. -->
        <targetPath>${build.directory}</targetPath>
        <!-- Do not substitute maven variables like ${variablename} in the
             contents of these files. -->
        <filtering>false</filtering>
      </resource>
    </resources>
    <plugins>
      <plugin>
        <!-- Installs correct version of node and npm locally. -->
        <groupId>com.github.eirslett</groupId>
        <artifactId>frontend-maven-plugin</artifactId>
      </plugin>

      <plugin>
        <groupId>org.codehaus.mojo</groupId>
        <artifactId>exec-maven-plugin</artifactId>
        <executions>
          <!-- Will execute npm install before any other process. See exec-maven-plugin in server.pom -->
          <!-- Inject a spritesheet into index.html based on all the icon sprite files. -->
          <execution>
            <id>npm run processhtml (${project.artifactId})</id>
            <phase>process-resources</phase>
            <goals>
              <goal>exec</goal>
            </goals>
            <configuration>
              <workingDirectory>${build.directory}</workingDirectory>
              <arguments>
                <argument>${npm.executable}</argument>
                <argument>run</argument>
                <argument>processhtml</argument>
              </arguments>
            </configuration>
          </execution>

          <!-- Transpile and bundle all the javascript and css. -->
          <execution>
            <id>npm run build (${project.artifactId})</id>
            <phase>compile</phase>
            <goals>
              <goal>exec</goal>
            </goals>
            <configuration>
              <workingDirectory>${build.directory}</workingDirectory>
              <arguments>
                <argument>${npm.executable}</argument>
                <argument>run</argument>
                <argument>build</argument>
              </arguments>
            </configuration>
          </execution>
        </executions>
      </plugin>

      <plugin>
        <artifactId>maven-surefire-plugin</artifactId>
        <configuration>
          <skip>true</skip>
          <failIfNoTests>false</failIfNoTests>
        </configuration>
      </plugin>

      <!-- Copy the built editor files to their position in the jar file. -->
      <plugin>
        <artifactId>maven-resources-plugin</artifactId>
        <executions>
          <execution>
            <phase>prepare-package</phase>
            <goals>
              <goal>copy-resources</goal>
            </goals>
            <configuration>
              <outputDirectory>${bundle.destination}</outputDirectory>
              <resources>
                <resource>
                  <directory>${built.artifact.directory}</directory>
                  <include>index.html</include>
                  <include>bundle.js</include>
                  <include>bundle.js.map</include>
                  <include>bundle.css</include>
                  <include>bundle.css.map</include>
                </resource>
              </resources>
            </configuration>
          </execution>
        </executions>
      </plugin>

    </plugins>
  </build>

  <!-- Attempts to avoid downloading anything from NPM. -->
  <profiles>
    <profile>
      <id>npmOffline</id>
      <activation>
        <property>
          <name>npmOffline</name>
        </property>
      </activation>
      <properties>
        <npm.cache.min>9999999</npm.cache.min>
      </properties>
    </profile>
  </profiles>

</project>
