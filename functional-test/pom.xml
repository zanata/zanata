<?xml version="1.0"?>
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
  <modelVersion>4.0.0</modelVersion>
  <parent>
    <groupId>org.zanata</groupId>
    <artifactId>server</artifactId>
    <version>3.6.0-SNAPSHOT</version>
  </parent>
  <artifactId>functional-test</artifactId>
  <!--if we want to use pom packaging, we need to explicitly enable some plugins and various things-->
  <!--<packaging>pom</packaging>-->
  <name>functional-test</name>

  <properties>
    <selenium.version>2.39.0</selenium.version>

    <!--Cargo Settings -->
    <cargo.wait>false</cargo.wait>
    <cargo.host>localhost</cargo.host>
    <cargo.container>jboss72x</cargo.container>
    <!--jboss port offset -->
    <cargo.port.offset>0</cargo.port.offset>
    <!-- This may be changed by the JBOSS_HTTP_PORT profile -->
    <cargo.servlet.port>8180</cargo.servlet.port>
    <cargo.installation>http://downloads.sourceforge.net/project/zanata/server/zanata-server.zip</cargo.installation>
    <cargo.extract.dir>${project.build.directory}/cargo/installs</cargo.extract.dir>
    <cargo.container.home>${project.build.directory}/jboss/container</cargo.container.home>
    <cargo.install.relative.to.container.home>../../cargo/installs/zanata-server</cargo.install.relative.to.container.home>
    <context.path>zanata</context.path>

    <!--data source-->
    <ds.jndi.name>zanataDatasource</ds.jndi.name>
    <!--mysql-maven-plugin will use these setup-->
    <ds.database>root</ds.database>
    <ds.username>root</ds.username>
    <ds.password>root</ds.password>
    <ds.connection.url>jdbc:mysql://localhost:${mysql.port}/${ds.database}?characterEncoding=UTF-8</ds.connection.url>
    <ds.driver.class>com.mysql.jdbc.Driver</ds.driver.class>

    <guava.version>15.0</guava.version>

    <!-- target zanata instance will be built by war overlay -->
    <zanata.test.war.name>zanata-test-${project.version}</zanata.test.war.name>
    <zanata.instance.url>http://${cargo.host}:${cargo.servlet.port}/${context.path}/</zanata.instance.url>
    <zanata.apikey>b6d7044e9ee3b2447c28fb7c50d86d98</zanata.apikey>
    <zanata.translatorkey>d83882201764f7d339e97c4b087f0806</zanata.translatorkey>
    <zanata.sample.projects.basedir>${project.build.testOutputDirectory}/sample-projects</zanata.sample.projects.basedir>

    <webdriver.log.file>${project.build.directory}/browser_console.log</webdriver.log.file>
    <!-- below path is specific to pahuang's machine. It needs be downloaded from http://code.google.com/p/chromedriver/downloads/list-->
    <webdriver.chrome.driver>/NotBackedUp/tools/chromedriver</webdriver.chrome.driver>
    <webdriver.chrome.bin>/opt/google/chrome/google-chrome</webdriver.chrome.bin>
    <!-- this decides what web driver type we intended to use-->
    <webdriver.type>chrome</webdriver.type>
    <webdriver.display>:0</webdriver.display>
    <webdriver.log>${project.build.directory}/webdriver.log</webdriver.log>
    <webdriver.screenshot.dir>${project.build.directory}/screenshots</webdriver.screenshot.dir>
    <webdriver.wait>10</webdriver.wait>
    <googleopenid.credentials>zanata.user.1:</googleopenid.credentials>
    <!-- on jenkins, this needs to be set to empty - so that cargo can shutdown. see http://stackoverflow.com/questions/1096642/tomcat-failed-to-shutdown -->
    <cargo.debug.jvm.args>
      -Xdebug -Xrunjdwp:transport=dt_socket,server=y,suspend=n,address=8787
      -Xnoagent -Djava.compiler=NONE
    </cargo.debug.jvm.args>
    <!-- this property can be used to control what test needs to be run by failsafe -->
    <include.test.patterns>**/AggregateTestSuite.java</include.test.patterns>
    <hibernate.search.default.indexBase>${project.build.directory}/zanataindex</hibernate.search.default.indexBase>
    <javamelody.storage-directory>${project.build.directory}/zanatastats</javamelody.storage-directory>
    <!-- This may be changed by the SMTP_PORT profile -->
    <smtp.port>2552</smtp.port>
    <jndi-remote-client.groupId>org.jboss.as</jndi-remote-client.groupId>
    <jndi-remote-client.artifactId>jboss-as-ejb-client-bom</jndi-remote-client.artifactId>
    <jndi-remote-client.version>7.1.1.Final</jndi-remote-client.version>
    <standalone.xml.file>standalone.xml</standalone.xml.file>
  </properties>

  <dependencyManagement>
    <dependencies>
      <dependency>
        <groupId>org.apache.httpcomponents</groupId>
        <artifactId>httpclient</artifactId>
        <version>4.3.3</version>
      </dependency>
      <dependency>
        <groupId>org.apache.httpcomponents</groupId>
        <artifactId>httpcore</artifactId>
        <version>4.3.2</version>
      </dependency>
      <dependency>
        <groupId>org.apache.httpcomponents</groupId>
        <artifactId>httpmime</artifactId>
        <version>4.3.3</version>
      </dependency>
      <dependency>
        <groupId>xerces</groupId>
        <artifactId>xercesImpl</artifactId>
        <version>2.11.0</version>
      </dependency>
      <dependency>
        <groupId>net.sourceforge.cssparser</groupId>
        <artifactId>cssparser</artifactId>
        <version>0.9.13</version>
      </dependency>
    </dependencies>
  </dependencyManagement>

  <dependencies>
    <dependency>
      <groupId>org.assertj</groupId>
      <artifactId>assertj-core</artifactId>
      <scope>test</scope>
    </dependency>

    <dependency>
      <groupId>org.seleniumhq.selenium</groupId>
      <artifactId>selenium-api</artifactId>
      <version>${selenium.version}</version>
    </dependency>
    <dependency>
      <groupId>org.seleniumhq.selenium</groupId>
      <artifactId>selenium-chrome-driver</artifactId>
      <version>${selenium.version}</version>
    </dependency>
    <dependency>
      <groupId>org.seleniumhq.selenium</groupId>
      <artifactId>selenium-firefox-driver</artifactId>
      <version>${selenium.version}</version>
    </dependency>

    <dependency>
      <groupId>org.seleniumhq.selenium</groupId>
      <artifactId>selenium-remote-driver</artifactId>
      <version>${selenium.version}</version>
      <exclusions>
        <exclusion>
          <groupId>commons-logging</groupId>
          <artifactId>commons-logging</artifactId>
        </exclusion>
      </exclusions>
    </dependency>
    <dependency>
      <groupId>org.seleniumhq.selenium</groupId>
      <artifactId>selenium-support</artifactId>
      <version>${selenium.version}</version>
    </dependency>
    <dependency>
      <groupId>com.google.guava</groupId>
      <artifactId>guava</artifactId>
    </dependency>
    <dependency>
      <groupId>commons-lang</groupId>
      <artifactId>commons-lang</artifactId>
    </dependency>

    <dependency>
      <groupId>junit</groupId>
      <artifactId>junit</artifactId>
    </dependency>
    <dependency>
      <groupId>org.slf4j</groupId>
      <artifactId>slf4j-api</artifactId>
    </dependency>

    <dependency>
      <groupId>org.subethamail</groupId>
      <artifactId>subethasmtp</artifactId>
      <version>3.1.7</version>
      <exclusions>
        <exclusion>
          <groupId>com.google.code.findbugs</groupId>
          <artifactId>jsr305</artifactId>
        </exclusion>
        <exclusion>
          <groupId>commons-logging</groupId>
          <artifactId>commons-logging</artifactId>
        </exclusion>
      </exclusions>
      <scope>test</scope>
    </dependency>
    <dependency>
      <groupId>javax.mail</groupId>
      <artifactId>mail</artifactId>
      <scope>test</scope>
    </dependency>

    <dependency>
      <groupId>org.hamcrest</groupId>
      <artifactId>hamcrest-core</artifactId>
      <scope>compile</scope>
    </dependency>
    <dependency>
      <groupId>org.hamcrest</groupId>
      <artifactId>hamcrest-library</artifactId>
      <scope>compile</scope>
    </dependency>

    <dependency>
      <groupId>org.projectlombok</groupId>
      <artifactId>lombok</artifactId>
    </dependency>

    <!-- cargo needs these-->
    <dependency>
      <groupId>${jdbc.groupId}</groupId>
      <artifactId>${jdbc.artifactId}</artifactId>
    </dependency>

    <dependency>
      <groupId>commons-io</groupId>
      <artifactId>commons-io</artifactId>
      <version>2.4</version>
    </dependency>


    <dependency>
      <groupId>org.codehaus.jackson</groupId>
      <artifactId>jackson-mapper-asl</artifactId>
    </dependency>

    <dependency>
      <groupId>org.zanata</groupId>
      <artifactId>zanata-common-api</artifactId>
    </dependency>
    <dependency>
      <groupId>org.codehaus.jackson</groupId>
      <artifactId>jackson-core-asl</artifactId>
    </dependency>
    <dependency>
      <groupId>org.jboss.resteasy</groupId>
      <artifactId>jaxrs-api</artifactId>
    </dependency>

    <!-- to use rest client in test -->
    <dependency>
      <groupId>org.zanata</groupId>
      <artifactId>zanata-rest-client</artifactId>
      <scope>compile</scope>
    </dependency>
    <dependency>
      <groupId>org.jboss.resteasy</groupId>
      <artifactId>resteasy-jaxrs</artifactId>
      <exclusions>
        <exclusion>
          <groupId>javassist</groupId>
          <artifactId>javassist</artifactId>
        </exclusion>
        <exclusion>
          <groupId>javax.annotation</groupId>
          <artifactId>jsr250-api</artifactId>
        </exclusion>
      </exclusions>
    </dependency>
    <dependency>
      <groupId>org.zanata</groupId>
      <artifactId>zanata-common-util</artifactId>
    </dependency>
    <dependency>
      <groupId>org.jboss.resteasy</groupId>
      <artifactId>resteasy-jaxb-provider</artifactId>
    </dependency>


    <dependency>
      <groupId>org.zanata</groupId>
      <artifactId>zanata-adapter-po</artifactId>
    </dependency>

    <dependency>
      <groupId>javax.xml.bind</groupId>
      <artifactId>jaxb-api</artifactId>
    </dependency>

    <dependency>
      <groupId>org.fedorahosted.openprops</groupId>
      <artifactId>openprops</artifactId>
    </dependency>

    <!-- to be able to create entities in functional test -->


    <!-- For remote JNDI lookup -->
    <dependency>
      <groupId>${jndi-remote-client.groupId}</groupId>
      <artifactId>${jndi-remote-client.artifactId}</artifactId>
      <version>${jndi-remote-client.version}</version>
      <type>pom</type>
      <scope>test</scope>
    </dependency>
    <dependency>
      <groupId>org.jboss</groupId>
      <artifactId>jboss-remote-naming</artifactId>
      <scope>test</scope>
    </dependency>

    <dependency>
      <groupId>com.google.code.findbugs</groupId>
      <artifactId>annotations</artifactId>
    </dependency>

    <dependency>
      <groupId>joda-time</groupId>
      <artifactId>joda-time</artifactId>
    </dependency>

    <dependency>
      <groupId>org.codehaus.groovy</groupId>
      <artifactId>groovy-all</artifactId>
      <version>${groovy.version}</version>
      <scope>provided</scope>
    </dependency>

  </dependencies>

  <profiles>
    <profile>
      <id>jbosseap6</id>
      <activation>
        <property>
          <name>appserver</name>
          <value>jbosseap6</value>
        </property>
      </activation>
      <build>
        <plugins>
          <plugin>
            <artifactId>maven-dependency-plugin</artifactId>
            <configuration>
              <usedDependencies>
                <usedDependency>org.jboss.as:jboss-as-ejb-client-bom</usedDependency>
              </usedDependencies>
            </configuration>
          </plugin>
        </plugins>
      </build>

    </profile>
    <profile>
      <id>wildfly8</id>
      <activation>
        <property>
          <name>appserver</name>
          <value>wildfly8</value>
        </property>
      </activation>
      <properties>
        <cargo.container>wildfly8x</cargo.container>
        <cargo.installation>http://download.jboss.org/wildfly/${wildfly.version}/wildfly-${wildfly.version}.zip</cargo.installation>
        <standalone.xml.file>standalone_wildfly.xml</standalone.xml.file>
        <jndi-remote-client.groupId>org.wildfly</jndi-remote-client.groupId>
        <jndi-remote-client.artifactId>wildfly-ejb-client-bom</jndi-remote-client.artifactId>
        <jndi-remote-client.version>${wildfly.version}</jndi-remote-client.version>
      </properties>
      <build>
        <plugins>
          <plugin>
            <artifactId>maven-dependency-plugin</artifactId>
            <configuration>
              <usedDependencies>
                <usedDependency>org.wildfly:wildfly-ejb-client-bom</usedDependency>
              </usedDependencies>
            </configuration>
          </plugin>
          <plugin>
            <groupId>org.codehaus.cargo</groupId>
            <artifactId>cargo-maven2-plugin</artifactId>
            <configuration combine.self="append">
            </configuration>
            <executions>
              <execution>
                <id>cargo-install</id>
                <phase>prepare-package</phase>
                <goals>
                  <goal>install</goal>
                </goals>
              </execution>
            </executions>
          </plugin>
          <plugin>
            <groupId>org.codehaus.gmaven</groupId>
            <artifactId>gmaven-plugin</artifactId>
            <executions>
              <execution>
                <id>unpack-wildfly-modules</id>
                <phase>package</phase>
                <goals>
                  <goal>execute</goal>
                </goals>
                <configuration>
                  <source>${pom.basedir}/src/etc/wildflyModules.groovy</source>
                </configuration>
              </execution>
            </executions>
          </plugin>
        </plugins>
      </build>
      <dependencyManagement>
        <dependencies>
          <dependency>
            <groupId>org.jboss</groupId>
            <artifactId>jboss-ejb-client</artifactId>
            <version>2.0.1.Final</version>
            <scope>test</scope>
          </dependency>
          <dependency>
            <groupId>org.jboss</groupId>
            <artifactId>jboss-remote-naming</artifactId>
            <version>2.0.1.Final</version>
            <scope>test</scope>
          </dependency>
        </dependencies>
      </dependencyManagement>
    </profile>
    <profile>
      <id>run-functional-test</id>
      <activation>
        <property>
          <name>functional-test</name>
        </property>
      </activation>
      <build>
        <plugins>
          <plugin>
            <groupId>org.codehaus.mojo</groupId>
            <artifactId>build-helper-maven-plugin</artifactId>
            <executions>
              <execution>
                <goals>
                  <goal>reserve-network-port</goal>
                </goals>
                <phase>generate-test-resources</phase>
                <configuration>
                  <portNames>
                    <portName>mysql.port</portName>
                  </portNames>
                </configuration>
              </execution>
            </executions>
          </plugin>
          <plugin>
            <artifactId>maven-dependency-plugin</artifactId>
            <executions>
              <execution>
                <goals>
                  <goal>unpack</goal>
                </goals>
                <configuration>
                  <artifactItems>
                    <artifactItem>
                      <groupId>com.jcabi</groupId>
                      <artifactId>mysql-dist</artifactId>
                      <version>5.5.34</version>
                      <classifier>${mysql.classifier}</classifier>
                      <type>zip</type>
                      <overWrite>false</overWrite>
                      <outputDirectory>${project.build.directory}/mysql-dist</outputDirectory>
                    </artifactItem>
                  </artifactItems>
                </configuration>
              </execution>
            </executions>
          </plugin>
          <plugin>
            <groupId>com.jcabi</groupId>
            <artifactId>jcabi-mysql-maven-plugin</artifactId>
            <configuration>
              <classifier>mysql.classifier</classifier>
              <port>${mysql.port}</port>
              <data>${project.build.directory}/mdb</data>
            </configuration>
            <executions>
              <execution>
                <id>mysql-test</id>
                <goals>
                  <goal>classify</goal>
                  <goal>stop</goal>
                </goals>
              </execution>
              <execution>
                <id>start-mysql</id>
                <goals>
                  <goal>start</goal>
                </goals>
                <phase>package</phase>
              </execution>
            </executions>
          </plugin>
          <plugin>
            <groupId>org.codehaus.mojo</groupId>
            <artifactId>sql-maven-plugin</artifactId>
            <version>1.5</version>
            <dependencies>
              <dependency>
                <groupId>${jdbc.groupId}</groupId>
                <artifactId>${jdbc.artifactId}</artifactId>
                <version>${jdbc.version}</version>
              </dependency>
            </dependencies>
            <configuration>
              <url>${ds.connection.url}</url>
              <driver>${ds.driver.class}</driver>
              <username>${ds.username}</username>
              <password>${ds.password}</password>
            </configuration>
            <executions>
              <execution>
                <goals>
                  <goal>execute</goal>
                </goals>
                <phase>package</phase>
                <configuration>
                  <sqlCommand>ALTER DATABASE ${ds.database} CHARACTER SET utf8 COLLATE utf8_general_ci;</sqlCommand>
                </configuration>
              </execution>
            </executions>
          </plugin>
          <plugin>
            <groupId>org.codehaus.cargo</groupId>
            <artifactId>cargo-maven2-plugin</artifactId>
            <configuration combine.self="append">
              <container>
                <!--if install from url-->
                <zipUrlInstaller>
                  <url>${cargo.installation}</url>
                  <downloadDir>${user.home}/Downloads</downloadDir>
                  <extractDir>${cargo.extract.dir}</extractDir>
                </zipUrlInstaller>
              </container>
              <configuration>
                <properties>
                  <cargo.servlet.port>${cargo.servlet.port}</cargo.servlet.port>
                </properties>
              </configuration>
              <deployables>
                <deployable>
                  <type>war</type>
                  <location>${project.basedir}/../zanata-test-war/target/${zanata.test.war.name}.war</location>
                  <pingURL>http://${cargo.host}:${cargo.servlet.port}/${context.path}/</pingURL>
                  <pingTimeout>300000</pingTimeout>
                  <properties>
                    <context>${context.path}</context>
                  </properties>
                </deployable>

              </deployables>
            </configuration>
            <executions>
              <execution>
                <id>cargo-start</id>
                <phase>pre-integration-test</phase>
                <goals>
                  <goal>start</goal>
                </goals>
              </execution>
              <execution>
                <id>cargo-stop</id>
                <phase>post-integration-test</phase>
                <goals>
                  <goal>stop</goal>
                </goals>
              </execution>
            </executions>
          </plugin>

          <plugin>
            <artifactId>maven-failsafe-plugin</artifactId>
            <version>2.11</version>
            <executions>
              <execution>
                <id>integration-test</id>
                <goals>
                  <goal>integration-test</goal>
                </goals>
              </execution>
              <execution>
                <id>verify</id>
                <goals>
                  <goal>verify</goal>
                </goals>
              </execution>
            </executions>
            <configuration>
              <redirectTestOutputToFile>false</redirectTestOutputToFile>
              <printSummary>true</printSummary>
              <runOrder>alphabetical</runOrder>
              <!--<forkMode>always</forkMode>-->
              <includes>
                <include>${include.test.patterns}</include>
                <!--index page-->
                <include>**/FeatureTest.java</include>
              </includes>
              <properties>
                <property>
                  <name>listener</name>
                  <value>org.zanata.util.ScreenshotEnabledTestRunListener,org.zanata.util.FeatureInventoryRecorder</value>
                </property>
              </properties>
              <systemPropertyVariables>
                <featureInventoryLocation>${project.build.directory}/feature-inventory</featureInventoryLocation>
              </systemPropertyVariables>
            </configuration>
          </plugin>
        </plugins>
      </build>
    </profile>

    <profile>
      <id>JBOSS_HTTP_PORT</id>
      <activation>
        <property>
          <name>env.JBOSS_HTTP_PORT</name>
        </property>
      </activation>
      <properties>
        <cargo.servlet.port>${env.JBOSS_HTTP_PORT}</cargo.servlet.port>
      </properties>
    </profile>

    <profile>
      <id>SMTP_PORT</id>
      <activation>
        <property>
          <name>env.SMTP_PORT</name>
        </property>
      </activation>
      <properties>
        <smtp.port>${env.SMTP_PORT}</smtp.port>
      </properties>
    </profile>
  </profiles>

  <build>
    <testResources>
      <testResource>
        <directory>src/test/resources</directory>
        <filtering>true</filtering>
        <includes>
          <include>**/*.properties</include>
          <include>**/*.xml</include>
        </includes>
      </testResource>
      <testResource>
        <directory>src/test/resources</directory>
        <filtering>false</filtering>
          <includes>
          <include>**/*.odt</include>
          <include>**/*.odg</include>
          <include>**/*.ods</include>
          <include>**/*.odp</include>
          <include>**/*.idml</include>
        </includes>
      </testResource>
      <testResource>
        <directory>src/test/resources/zanata-user-config</directory>
        <filtering>true</filtering>
      </testResource>
      <testResource>
        <directory>sample-projects</directory>
        <targetPath>${zanata.sample.projects.basedir}</targetPath>
        <filtering>true</filtering>
        <includes>
          <include>**/zanata.xml</include>
          <include>**/pom.xml</include>
        </includes>
      </testResource>
      <testResource>
        <directory>sample-projects</directory>
        <targetPath>${zanata.sample.projects.basedir}</targetPath>
        <filtering>false</filtering>
        <excludes>
          <exclude>**/zanata.xml</exclude>
          <exclude>**/pom.xml</exclude>
        </excludes>
      </testResource>
      <testResource>
        <directory>src/test/resources/feature-inventory</directory>
        <filtering>false</filtering>
        <targetPath>${project.build.directory}/feature-inventory</targetPath>
      </testResource>
    </testResources>
    <plugins>
      <plugin>
        <artifactId>maven-antrun-plugin</artifactId>
        <executions>
          <execution>
            <phase>generate-resources</phase>
            <goals>
              <goal>run</goal>
            </goals>
            <configuration>
              <target>
                <echo>===== Properties that can be set for functional test =====</echo>
                <echo>-Dfunctional-test : to activate functional test run</echo>
                <echo>-Dzanata.target.version=version of zanata to deploy. Default is: ${project.parent.version}</echo>
                <echo>-Dzanata.instance.url=http://${cargo.host}:${cargo.servlet.port}/${context.path}</echo>
                <echo>-Dzanata.apikey=b6d7044e9ee3b2447c28fb7c50d86d98</echo>
                <!--<echo>-Dzanata.client.version=maven client version to use. Currently: ${zanata.client.version}</echo>-->
                <echo>-Dzanata.sample.projects.basedir=${project.build.testOutputDirectory}/sample-projects</echo>
                <echo>-Dcargo.debug.jvm.args : If not set by default will listen to port 8787. Need to set to empty on jenkins</echo>
                <echo>-Dinclude.test.patterns=test filter pattern. Can be used to control what test to run. Default is **/*AggregateTestSuite.java.</echo>
                <echo>-Dwebdriver.type=run tests in htmlUnit, chrome or firefox. For chrome, see also webdriver.chrome.* Default is chrome.</echo>
                <echo>-Dwebdriver.display=display to run test browser in, for Xnest or otherwise. Default is :0.</echo>
                <echo>-Dwebdriver.chrome.bin=full path to chrome binary.</echo>
                <echo>-Dwebdriver.chrome.driver=full path to chromedriver binary.</echo>
                <echo>-Dwebdriver.wait=global wait time in seconds for element searches. Default is 10.</echo>
                <echo>==========================================================</echo>
                <echo>to ask cargo to start up then wait so that tests can be run manually: mvn clean package cargo:run -Dfunctional-test -Dmysql.port=13306</echo>
              </target>
            </configuration>
          </execution>
        </executions>
      </plugin>
      <plugin>
        <artifactId>maven-dependency-plugin</artifactId>
        <configuration>
          <usedDependencies combine.children="append">
            <usedDependency>mysql:mysql-connector-java</usedDependency>
            <usedDependency>org.codehaus.groovy:groovy-all</usedDependency>
            <usedDependency>org.jboss.resteasy:resteasy-jaxb-provider</usedDependency>
            <usedDependency>org.projectlombok:lombok</usedDependency>
          </usedDependencies>
        </configuration>
      </plugin>

      <plugin>
        <artifactId>maven-enforcer-plugin</artifactId>
        <configuration>
          <rules>
            <bannedDependencies>
              <excludes combine.children="append">
                <!-- use xalan:xalan -->
                <exclude>jakarta-regexp:jakarta-regexp</exclude>
              </excludes>
              <searchTransitive>true</searchTransitive>
            </bannedDependencies>
          </rules>
        </configuration>
      </plugin>

      <!--we want to run tests in integration phase-->
      <plugin>
        <artifactId>maven-surefire-plugin</artifactId>
        <configuration>
          <skip>true</skip>
          <failIfNoTests>false</failIfNoTests>
        </configuration>
      </plugin>

      <plugin>
        <groupId>org.codehaus.cargo</groupId>
        <artifactId>cargo-maven2-plugin</artifactId>
        <version>1.4.5</version>
        <!-- this plugin configuration is shared by two profiles: functional-test and wildfly -->
        <configuration>
          <container>
            <containerId>${cargo.container}</containerId>
            <type>installed</type>

            <output>${project.build.directory}/container.log</output>
            <append>false</append>
            <log>${project.build.directory}/cargo.log</log>

            <systemProperties>
              <ehcache.disk.store.dir>${project.build.directory}/ehcache</ehcache.disk.store.dir>
              <jboss.server.log.threshold>WARN</jboss.server.log.threshold>
              <hibernate.search.default.indexBase>${hibernate.search.default.indexBase}</hibernate.search.default.indexBase>
              <javamelody.storage-directory>${javamelody.storage-directory}</javamelody.storage-directory>
              <jboss.socket.binding.port-offset>${cargo.port.offset}</jboss.socket.binding.port-offset>
            </systemProperties>

            <timeout>0</timeout>
          </container>

          <configuration>
            <type>standalone</type>
            <home>${cargo.container.home}</home>

            <configfiles>
              <configfile>
                <file>${project.build.testOutputDirectory}/datasource/zanata-ds.xml</file>
                <todir>deployments</todir>
              </configfile>
              <!-- see above zipUrlInstaller/extractDir-->
              <!-- cargo will force todir and tofile to be relative to container home directory -->

              <!-- security and jndi for properties -->
              <configfile>
                <file>${project.build.testOutputDirectory}/conf/${standalone.xml.file}</file>
                <tofile>configuration/standalone.xml</tofile>
              </configfile>

            </configfiles>

            <files>
              <file>
                <file>${settings.localRepository}/${jdbc.groupId}/${jdbc.artifactId}/${jdbc.version}/${jdbc.artifactId}-${jdbc.version}.jar</file>
                <tofile>deployments/${jdbc.artifactId}.jar</tofile>
              </file>
            </files>

            <properties>
              <cargo.jboss.configuration>standalone</cargo.jboss.configuration>
              <cargo.jvmargs>
                <!-- NB: JDom parser doesn't like comments starting with '-' -->
                -XX:PermSize=512m -XX:MaxPermSize=1024
                -XX:+UseConcMarkSweepGC -XX:+CMSClassUnloadingEnabled
                ${cargo.debug.jvm.args}
              </cargo.jvmargs>
              <cargo.port.offset>${cargo.port.offset}</cargo.port.offset>
              <cargo.jboss.ajp.port>8109</cargo.jboss.ajp.port>
            </properties>
          </configuration>
        </configuration>
      </plugin>
    </plugins>
    <pluginManagement>
      <plugins>
        <!--This plugin's configuration is used to store Eclipse m2e settings only. It has no influence on the Maven build itself.-->
        <plugin>
          <groupId>org.eclipse.m2e</groupId>
          <artifactId>lifecycle-mapping</artifactId>
          <version>1.0.0</version>
          <configuration>
            <lifecycleMappingMetadata>
              <pluginExecutions>
                <pluginExecution>
                  <pluginExecutionFilter>
                    <groupId>
                      org.apache.maven.plugins
                    </groupId>
                    <artifactId>
                      maven-antrun-plugin
                    </artifactId>
                    <versionRange>
                      [1.7,)
                    </versionRange>
                    <goals>
                      <goal>run</goal>
                    </goals>
                  </pluginExecutionFilter>
                  <action>
                    <ignore />
                  </action>
                </pluginExecution>
              </pluginExecutions>
            </lifecycleMappingMetadata>
          </configuration>
        </plugin>

        <!--We don't want cobertura here-->
        <plugin>
          <groupId>org.codehaus.mojo</groupId>
          <artifactId>cobertura-maven-plugin</artifactId>
          <configuration>
            <instrumentation>
              <excludes>
                <exclude>**/*</exclude>
              </excludes>
            </instrumentation>
            <check>
              <totalBranchRate>0</totalBranchRate>
              <totalLineRate>0</totalLineRate>
              <haltOnFailure>false</haltOnFailure>
            </check>
          </configuration>
        </plugin>
      </plugins>
    </pluginManagement>
  </build>
</project>
