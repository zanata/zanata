<?xml version="1.0"?>
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
  <modelVersion>4.0.0</modelVersion>
  <parent>
    <groupId>org.zanata</groupId>
    <artifactId>server</artifactId>
    <version>4.0.0-SNAPSHOT</version>
  </parent>
  <artifactId>frontend</artifactId>
  <name>frontend</name>
  <url>http://maven.apache.org</url>

  <!-- Referenced later in the document with ${tagname}. -->
  <properties>
    <!-- Specified to ensure build is consistent cross-platform. -->
    <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>

    <!-- Directory to run the build from. Source is copied here before installing
         dependencies to this location then running the build. -->
    <build.directory>${project.build.directory}/src</build.directory>

    <!-- Path within the jar to put the built artifacts.
         Note: META-INF/resources/* is served as static content, so this serves
         the built files at the root of the website -->
    <bundle.dest>${project.build.outputDirectory}/META-INF/resources</bundle.dest>
  </properties>

  <dependencies>
  </dependencies>

  <build>
    <!-- Copy all the source files to the build directory.
         This is done to keep the original source directory clean, because the
         build will download dependencies and places built artifacts in the
         same directory as the source files.
         This happens in phase process-resources. -->
    <resources>
      <resource>
        <!-- Do not substitute maven variables like ${variablename} in the
             contents of these files. -->
        <filtering>false</filtering>
        <!-- Path from pom to the source files that will be used. -->
        <directory>src</directory>
        <!-- Location to copy source files to. -->
        <targetPath>${build.directory}</targetPath>
      </resource>
    </resources>
    <plugins>
      <plugin>
        <!-- Installs correct version of node and npm locally. -->
        <groupId>com.github.eirslett</groupId>
        <artifactId>frontend-maven-plugin</artifactId>
      </plugin>

      <plugin>
        <groupId>org.codehaus.mojo</groupId>
        <artifactId>exec-maven-plugin</artifactId>

        <executions>
          <!-- Will execute npm install before any other process. See exec-maven-plugin in server.pom -->
          <!-- Transpile and bundle all the javascript and css. -->
          <execution>
            <id>execute npm run build for: ${project.artifactId}</id>
            <phase>compile</phase>
            <goals>
              <goal>exec</goal>
            </goals>
            <configuration>
              <workingDirectory>${build.directory}</workingDirectory>
              <arguments>
                <argument>${npm.executable}</argument>
                <argument>run</argument>
                <argument>build</argument>
              </arguments>
            </configuration>
          </execution>
        </executions>
      </plugin>

      <plugin>
        <artifactId>maven-surefire-plugin</artifactId>
        <configuration>
          <skip>true</skip>
          <failIfNoTests>false</failIfNoTests>
        </configuration>
      </plugin>

      <!-- Copy the built bundle files to the META-INF/resources directory. -->
      <plugin>
        <artifactId>maven-resources-plugin</artifactId>
        <executions>
          <execution>
            <phase>prepare-package</phase>
            <goals>
              <goal>copy-resources</goal>
            </goals>
            <configuration>
              <outputDirectory>${bundle.dest}</outputDirectory>
              <resources>
                <resource>
                  <directory>${build.directory}</directory>
                  <include>frontend.*.min.js</include>
                  <include>frontend.css</include>
                </resource>
              </resources>
            </configuration>
          </execution>
        </executions>
      </plugin>

    </plugins>
  </build>

  <!-- Attempts to avoid downloading anything from NPM. -->
  <profiles>
    <profile>
      <id>npmOffline</id>
      <activation>
        <property>
          <name>npmOffline</name>
        </property>
      </activation>
      <properties>
        <npm.cache.min>9999999</npm.cache.min>
      </properties>
    </profile>
  </profiles>

</project>
